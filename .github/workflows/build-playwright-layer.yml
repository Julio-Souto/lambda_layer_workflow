name: Build Playwright Layer (AL2023 Python 3.12)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-layer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python host helper
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Create wheelhouse manylinux
        run: |
          mkdir -p wheelhouse
          docker run --rm -v "${{ github.workspace }}/wheelhouse":/wheels -v "${{ github.workspace }}/requirements.txt":/requirements.txt \
            quay.io/pypa/manylinux_2_28_x86_64:latest /bin/bash -lc "\
              /opt/python/cp312-cp312/bin/pip wheel --no-deps --wheel-dir=/wheels -r /requirements.txt || true; \
              chown -R $(id -u):$(id -g) /wheels || true"

      - name: Prepare out directory
        run: |
          rm -rf out || true
          mkdir -p out/python
          mkdir -p out/lib64
          chmod -R a+rwX out || true

      - name: Build layer in amazonlinux container
        run: |
          set -eo pipefail
          echo "Starting amazonlinux container to build the layer"
          docker run --rm --entrypoint /bin/bash \
            -v "${{ github.workspace }}/wheelhouse":/wheels \
            -v "${{ github.workspace }}/out":/out \
            -v "${{ github.workspace }}/requirements.txt":/requirements.txt \
            public.ecr.aws/amazonlinux/amazonlinux:2023 -lc "\
              set -eo pipefail; \
              echo 'update and install base packages'; \
              yum -y update || true; \
              yum -y install -y which findutils python3 python3-devel python3-pip tar xz unzip curl fontconfig freetype freetype-devel glibc-langpack-en || true; \
              echo 'install common libs for chromium (tolerate failures)'; \
              yum -y install -y nspr nss nss-util dbus-glib atk at-spi2-atk expat cairo libX11 libXcomposite libXcursor libXdamage libXrandr libXtst libXrender libXfixes libXext libXScrnSaver libxcb libxshmfence libxkbcommon mesa-libgbm libdrm alsa-lib gtk3 pango || true; \
              echo 'python3 info:'; which python3 || true; python3 --version || true; \
              echo 'detect python minor version using python3 -V and awk'; \
              PYVER=$(python3 -V 2>&1 | awk '{v=$2; split(v,a,\".\"); print a[1]\".\"a[2]}'); \
              echo \"Detected python version inside container: $PYVER\"; \
              OUT_SITE=/out/python/lib/python${PYVER}/site-packages; \
              mkdir -p \"$OUT_SITE\"; \
              echo 'ensure pip exists'; \
              python3 -m ensurepip --upgrade || true; \
              if ! python3 -m pip --version >/dev/null 2>&1; then \
                echo 'pip not present, fetching get-pip.py'; \
                curl -sS https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py || true; \
                python3 /tmp/get-pip.py || true; \
              fi; \
              python3 -m pip install --upgrade pip setuptools wheel || true; \
              echo 'install python wheels into $OUT_SITE from wheelhouse if possible'; \
              python3 -m pip install --no-index --find-links=/wheels --no-deps --target=\"$OUT_SITE\" -r /requirements.txt || true; \
              echo 'install playwright into $OUT_SITE to make module available for python3'; \
              python3 -m pip install --no-deps --upgrade playwright --target=\"$OUT_SITE\" || true; \
              echo 'chmod out'; chmod -R a+rwX /out || true; \
              echo 'set PYTHONPATH and PLAYWRIGHT_BROWSERS_PATH then run playwright install'; \
              export PYTHONPATH=\"$OUT_SITE\"; \
              export PLAYWRIGHT_BROWSERS_PATH=/tmp/ms-playwright; \
              echo \"PYTHONPATH=${PYTHONPATH:-}\"; echo \"PLAYWRIGHT_BROWSERS_PATH=${PLAYWRIGHT_BROWSERS_PATH:-}\"; \
              PYTHONPATH=\"$PYTHONPATH\" PLAYWRIGHT_BROWSERS_PATH=\"$PLAYWRIGHT_BROWSERS_PATH\" python3 -m playwright install --with-deps chromium 2>&1 | tee /tmp/playwright-install.log || true; \
              echo 'copy browsers to /out/.cache/ms-playwright'; \
              mkdir -p /out/.cache/ms-playwright || true; \
              cp -a /tmp/ms-playwright/* /out/.cache/ms-playwright/ 2>/dev/null || true; \
              echo 'collect native libs into /out/lib64 if present'; \
              mkdir -p /out/lib64 || true; \
              for lib in libnspr4.so libnss3.so libnssutil3.so libdbus-1.so libatk-1.0.so libatk-bridge-2.0.so libexpat.so.1 libatspi.so.0 libX11.so.6 libXcomposite.so.1 libXdamage.so.1 libXext.so.6 libXfixes.so.3 libXrandr.so.2 libgbm.so.1 libxcb.so.1 libxkbcommon.so.0 libudev.so.1 libasound.so.2; do \
                for p in /usr/lib64/$lib /usr/lib/$lib /lib64/$lib /lib/$lib; do \
                  if [ -f \"$p\" ]; then cp -v \"$p\" /out/lib64/ || true; fi; \
                done; \
              done; \
              echo 'save logs into /out and fix perms'; \
              chmod -R a+rwX /out || true; \
              if [ -f /tmp/playwright-install.log ]; then cp /tmp/playwright-install.log /out/playwright-install.log || true; fi; \
              FIND_PATH=$(which find || echo /usr/bin/find); \
              echo \"Using find at: $FIND_PATH\"; \
              $FIND_PATH /out -type f -name headless_shell -exec chmod +x {} \\; || true; \
              $FIND_PATH /out -type f -name chrome -exec chmod +x {} \\; || true; \
              chown -R 1000:1000 /out || true; \
              echo 'amazonlinux container step complete'"

      - name: Post process move browsers
        run: |
          set -e
          if [ -d out/python ]; then
            python_dirs=$(find out/python -maxdepth 3 -type d -name "site-packages" -print || true)
            for d in $python_dirs; do
              if [ -d "$d/playwright" ]; then
                echo "Found playwright in $d"
                candidates=$(find "$d/playwright" -maxdepth 4 -type d -name "chrome-linux" -print || true)
                if [ -n "$candidates" ]; then
                  mkdir -p out/.cache/ms-playwright
                  for c in $candidates; do
                    src=$(dirname "$(dirname "$c")")
                    cp -a "$src"/* out/.cache/ms-playwright/ || true
                  done
                fi
              fi
            done
          fi
          chmod -R a+rX out/.cache/ms-playwright || true

      - name: Show out size and sample files
        run: |
          du -sh out || true
          echo "OUT TOP LEVEL"
          ls -la out || true
          echo "SITE PACKAGES SAMPLE"
          ls -la out/python | head -n 100 || true
          if [ -d out/.cache/ms-playwright ]; then
            echo ".cache sample"
            ls -la out/.cache/ms-playwright | head -n 40 || true
          fi
          if [ -d out/lib64 ]; then
            echo "lib64 sample"
            ls -la out/lib64 | head -n 80 || true
          fi
          if [ -f out/playwright-install.log ]; then
            echo "playwright-install.log tail"
            tail -n 400 out/playwright-install.log || true
          fi

      - name: Zip layer
        run: |
          cd out
          zip -r ../playwright_layer_py312.zip .
          cd ..
          ls -lh playwright_layer_py312.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: playwright-layer-py312
          path: playwright_layer_py312.zip