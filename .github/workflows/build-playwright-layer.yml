name: Build Playwright Layer (AL2023 Python 3.12)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-layer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python host helper
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Create wheelhouse manylinux
        run: |
          mkdir -p wheelhouse
          docker run --rm -v "${{ github.workspace }}/wheelhouse":/wheels -v "${{ github.workspace }}/requirements.txt":/requirements.txt \
            quay.io/pypa/manylinux_2_28_x86_64:latest /bin/bash -lc "\
              /opt/python/cp312-cp312/bin/pip wheel --no-deps --wheel-dir=/wheels -r /requirements.txt || true; \
              chown -R $(id -u):$(id -g) /wheels || true"

      - name: Prepare out dir
        run: |
          rm -rf out || true
          mkdir -p out/python/lib/python3.12/site-packages
          # Dar permisos completos al directorio out
          chmod -R 755 out || true
          chown -R $USER:$USER out || true

      - name: Install system libraries separately
        run: |
          set -eo pipefail
          echo "Installing system libraries (compatible with AL2023 and Debian)..."

          docker run --rm \
            -v "${{ github.workspace }}/out":/out \
            public.ecr.aws/amazonlinux/amazonlinux:2023 \
            bash -c '
              dnf install -y \
                nss nss-util nspr \
                libX11 libXcomposite libXcursor libXdamage \
                libXrandr libXrender libxcb \
                atk at-spi2-core at-spi2-atk \
                cups-libs libdrm mesa-libgbm \
                alsa-lib pango \
                fontconfig freetype dbus-libs systemd-libs \
                gtk3 cairo cairo-gobject \
                pulseaudio-libs xkeyboard-config

              mkdir -p /out/lib64

              # Detectar las rutas válidas de librerías (AmazonLinux o Debian)
              LIB_PATHS="/usr/lib64 /usr/lib /lib64 /lib /usr/lib/x86_64-linux-gnu"
              copy_lib() {
                local lib=$1
                for path in $LIB_PATHS; do
                  if [ -f "$path/$lib" ]; then
                    cp "$path/$lib" /out/lib64/ && echo "Copied: $path/$lib" && return 0
                  fi
                done
                echo "Warning: $lib not found"
              }

              # Lista completa de librerías que Chromium puede requerir
              LIBS=(
                libnspr4.so libnss3.so libnssutil3.so libsmime3.so libplc4.so libplds4.so
                libatk-1.0.so.0 libatk-bridge-2.0.so.0 libatspi.so.0
                libdbus-1.so.3 libsystemd.so.0 libudev.so.1
                libcairo.so.2 libcairo-gobject.so.2 libpango-1.0.so.0 libpangocairo-1.0.so.0
                libX11.so.6 libXcomposite.so.1 libXdamage.so.1 libXext.so.6 libXfixes.so.3 libXrandr.so.2 libXrender.so.1 libxcb.so.1 libxkbcommon.so.0
                libgbm.so.1 libdrm.so.2 libasound.so.2 libpulse.so.0 libpulse-simple.so.0
                libgtk-3.so.0 libgdk-3.so.0 libgobject-2.0.so.0 libglib-2.0.so.0 libgio-2.0.so.0
                libfreetype.so.6 libfontconfig.so.1 libexpat.so.1 libcups.so.2
                libXcursor.so.1 libXtst.so.6 libXss.so.1 libxshmfence.so.1 libXi.so.6 libgallium-24.2.6.so
                libgallium-24.2.6.so libwayland-server.so.0 libxcb-randr.so.0 libXau.so.6 libglapi.so.0
                libLLVM-15.so libX11-xcb.so.1 libxcb-dri3.so.0 libxcb-present.so.0 libxcb-xfixes.so.0
                libxcb-sync.so.1 libsensors.so.4 libdrm_radeon.so.1 libdrm_amdgpu.so.1 libelf.so.1
                libdrm_intel.so.1 libxcb-dri2.so.0 libX11-xcb.so.1 libxcb-dri3.so.0 libxcb-present.so.0 libxcb-xfixes.so.0
                libelf.so.1 libdrm_intel.so.1 libxcb-dri2.so.0 libedit.so.0
              )

              for L in "${LIBS[@]}"; do
                copy_lib "$L"
              done
            '

      - name: Download Playwright browsers (Ubuntu)
        run: |
          echo "Downloading Playwright browsers inside Ubuntu (apt available)..."
          docker run --rm \
            -v "${{ github.workspace }}":/workspace \
            -v "${{ github.workspace }}/out":/out \
            -w /workspace \
            ubuntu:22.04 /bin/bash -lc "\
              set -euo pipefail; \
              apt-get update && apt-get install -y python3 python3-pip curl xz-utils unzip ca-certificates || true; \
              python3 -m pip install --upgrade pip setuptools wheel || true; \
              python3 -m pip install --no-cache-dir playwright || true; \
              export PLAYWRIGHT_BROWSERS_PATH=/out/.cache/ms-playwright; \
              python3 -m playwright install --with-deps chromium 2>&1 | tee /out/playwright-install-ubuntu.log || true; \
              echo 'Done downloading browsers in Ubuntu. Check /out/playwright-install-ubuntu.log' \
            "
            
      - name: Make build script executable / fix CRLF
        run: |
          # Asegúrate de que el script usa saltos de línea Unix (evita CRLF de Windows)
          if [ -f build_in_container.sh ]; then
            sed -i 's/\r$//' build_in_container.sh || true
            chmod +x build_in_container.sh || true
            echo "build_in_container.sh perms:"
            ls -l build_in_container.sh
          else
            echo "build_in_container.sh not found!"
            exit 1
          fi

      - name: Run build script inside python:3.12 lambda image
        run: |
          docker run --rm --entrypoint /bin/bash \
            -v "${{ github.workspace }}":/workspace \
            -v "${{ github.workspace }}/out":/out \
            -w /workspace \
            public.ecr.aws/lambda/python:3.12 \
            -c "/workspace/build_in_container.sh"

      - name: Show out contents (debug)
        run: |
          echo "=== /out tree (depth 4) ==="
          find out -maxdepth 4 -ls || true
          echo "=== build-info.txt ==="
          [ -f out/build-info.txt ] && sed -n '1,200p' out/build-info.txt || echo "no build-info"
          echo "=== ldd-headless.txt (tail) ==="
          [ -f out/ldd-headless.txt ] && tail -n 200 out/ldd-headless.txt || echo "no ldd output"
          echo "=== ldd-missing.txt ==="
          [ -f out/ldd-missing.txt ] && cat out/ldd-missing.txt || echo "no missing libs file"
          echo "=== playwright-install.log (tail) ==="
          [ -f out/playwright-install.log ] && tail -n 200 out/playwright-install.log || echo "no playwright-install.log"

      - name: Prepare directory structure for zipping
        run: |
          # Crear estructura temporal con permisos adecuados
          mkdir -p temp_python_layer
          mkdir -p temp_chromium_zip
          
          # Mover librerías Python a su carpeta (sin .cache)
          if [ -d "out/python" ]; then
            cp -r out/python temp_python_layer/
            echo "Librerías Python copiadas a temp_python_layer/"
          fi
          
          # Mover chromium y librerías nativas a estructura separada
          if [ -d "out/.cache" ]; then
            cp -r out/.cache temp_chromium_zip/
            echo "Chromium y librerías nativas copiadas a temp_chromium_zip/"
          fi
          
          # También buscar chromium en otros lugares
          find out -name "chrome" -o -name "chromium" -o -name "headless_shell" | head -5 | while read bin; do
            if [ -f "$bin" ]; then
              bin_dir=$(dirname "$bin")
              mkdir -p temp_chromium_zip/.cache/ms-playwright
              cp -r "$bin_dir" temp_chromium_zip/.cache/ms-playwright/ 2>/dev/null || true
              echo "Copiado binario de: $bin"
            fi
          done
          
          # Buscar y copiar librerías .so* a lib64 dentro de chromium zip
          mkdir -p temp_chromium_zip/.cache/ms-playwright/lib64
          find out -name "*.so*" -type f | head -20 | while read lib; do
            cp "$lib" temp_chromium_zip/.cache/ms-playwright/lib64/ 2>/dev/null || true
          done
          
          # Asegurar permisos ejecutables
          find temp_chromium_zip -name "chrome" -o -name "chromium" -o -name "headless_shell" | while read bin; do
            if [ -f "$bin" ]; then
              chmod +x "$bin"
              echo "Haciendo ejecutable: $bin"
            fi
          done
          
          echo "Estructura de temp_python_layer:"
          ls -la temp_python_layer/ || true
          
          echo "Estructura de temp_chromium_zip:"
          ls -la temp_chromium_zip/.cache/ms-playwright/ || true

      - name: Create Python layer zip
        run: |
          cd temp_python_layer
          zip -r ../playwright_python_layer.zip .
          cd ..
          echo "Python layer zip creado"
          ls -lh playwright_python_layer.zip

      - name: Create Chromium binary zip
        run: |
          cd temp_chromium_zip
          zip -r ../chromium_binary.zip .
          cd ..
          echo "Chromium binary zip creado"
          ls -lh chromium_binary.zip
          echo "Contenido del chromium zip:"
          unzip -l chromium_binary.zip | head -20

      - name: Upload Python layer artifact
        uses: actions/upload-artifact@v4
        with:
          name: playwright-python-layer
          path: playwright_python_layer.zip

      - name: Upload Chromium binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: chromium-binary
          path: chromium_binary.zip