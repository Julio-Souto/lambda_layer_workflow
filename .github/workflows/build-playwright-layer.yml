name: Build Playwright Layer (AL2023 Python 3.12)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-layer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Prepare out directory
        run: |
          rm -rf out || true
          mkdir -p out/python
          mkdir -p out/lib64
          chmod -R 755 out || true

      - name: Create build script for container
        run: |
          cat > build_in_container.sh <<'SCRIPT'
#!/usr/bin/env bash
set -ex
set -o pipefail

WORKSPACE="/workspace"
OUT="/out"
LOG="${OUT}/build.log"

echo "Build script start: $(date)" | tee -a "$LOG"

# minimal tools
dnf -y update || true
dnf -y install -y which findutils tar xz unzip curl fontconfig freetype glibc-langpack-en python3 python3-pip python3-devel || true

# ensure pip present
python3 -m ensurepip --upgrade || true
if ! python3 -m pip --version >/dev/null 2>&1; then
  curl -sS https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py || true
  python3 /tmp/get-pip.py || true
fi
python3 -m pip install --upgrade pip setuptools wheel || true

# detect python minor version
PYVER=$(python3 -c 'import sys; v=sys.version_info; print("%d.%d" % (v.major, v.minor))')
OUT_SITE="$OUT/python/lib/python${PYVER}/site-packages"
mkdir -p "$OUT_SITE"
chmod -R a+rwX "$OUT_SITE"

# install playwright into OUT_SITE
python3 -m pip install --no-deps --upgrade playwright --target="$OUT_SITE" || true

# set env so python will pick up package; set browsers path for install
export PYTHONPATH="$OUT_SITE"
export PLAYWRIGHT_BROWSERS_PATH=/tmp/ms-playwright

# install browsers to /tmp, capture log
PYTHONPATH="$PYTHONPATH" PLAYWRIGHT_BROWSERS_PATH="$PLAYWRIGHT_BROWS_PATH" python3 -m playwright install --with-deps chromium 2>&1 | tee /tmp/playwright-install.log || true
cp -v /tmp/playwright-install.log "$OUT/" || true

# copy browsers into OUT
mkdir -p "$OUT/.cache/ms-playwright"
cp -a /tmp/ms-playwright/* "$OUT/.cache/ms-playwright/" 2>/dev/null || true

# find headless binary
HEADLESS_BIN="$(find "$OUT" -type f -name headless_shell -print -quit || true)"
if [ -z "$HEADLESS_BIN" ]; then
  HEADLESS_BIN="$(find "$OUT" -type f \( -name chrome -o -name chromium \) -print -quit || true)"
fi
echo "HEADLESS_BIN=${HEADLESS_BIN}" > "$OUT/build-info.txt"

if [ -z "$HEADLESS_BIN" ]; then
  echo "No headless binary found" | tee -a "$LOG"
  exit 0
fi

# run ldd and save
ldd "$HEADLESS_BIN" > "$OUT/ldd-headless.txt" 2>&1 || true

# parse libs and copy
mkdir -p "$OUT/lib64"
LIBS=$(awk '{for(i=1;i<=NF;i++) if($i ~ /\.so/) print $i}' "$OUT/ldd-headless.txt" | sed 's/,//g' | sed 's/.*\///' | sort -u)
copy_lib() {
  name="$1"
  for p in /usr/lib64 /usr/lib /lib64 /lib /opt/lib64; do
    if [ -f "$p/$name" ]; then
      cp -v "$p/$name" "$OUT/lib64/" && return 0
    fi
    for f in "$p/$name"*; do
      [ -e "$f" ] || continue
      cp -v "$f" "$OUT/lib64/" && return 0
    done
  done
  echo "WARN: $name not found" >> "$OUT/ldd-missing.txt"
  return 1
}
for lib in $LIBS; do
  case "$lib" in
    linux-vdso*|ld-linux*|ld64.so*) continue ;;
  esac
  copy_lib "$lib" || true
done

cp -v "$LOG" "$OUT/" || true
chmod -R a+rwX "$OUT" || true
echo "Container script done" | tee -a "$LOG"
SCRIPT
          chmod +x build_in_container.sh

      - name: Run build script inside amazonlinux container
        run: |
          docker run --rm -v "${{ github.workspace }}":/workspace -w /workspace public.ecr.aws/amazonlinux/amazonlinux:2023 /bin/bash /workspace/build_in_container.sh

      - name: Show out contents (debug)
        run: |
          echo "=== /out tree ==="
          find out -maxdepth 4 -ls || true
          echo "=== build-info.txt ==="
          [ -f out/build-info.txt ] && sed -n '1,200p' out/build-info.txt || echo "no build-info"
          echo "=== ldd-headless.txt (tail) ==="
          [ -f out/ldd-headless.txt ] && tail -n 200 out/ldd-headless.txt || echo "no ldd output"
          echo "=== ldd-missing.txt ==="
          [ -f out/ldd-missing.txt ] && cat out/ldd-missing.txt || echo "no missing libs file"
          echo "=== playwright-install.log (tail) ==="
          [ -f out/playwright-install.log ] && tail -n 200 out/playwright-install.log || echo "no playwright-install.log"

      - name: Zip layer
        run: |
          cd out
          zip -9 -r ../playwright_layer_py312.zip .
          cd ..
          ls -lh playwright_layer_py312.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: playwright-layer-py312
          path: playwright_layer_py312.zip