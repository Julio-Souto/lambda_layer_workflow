name: Build Playwright Layer (AL2023 Python 3.12)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-layer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python host helper
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Create wheelhouse manylinux
        run: |
          mkdir -p wheelhouse
          docker run --rm \
            -v "${{ github.workspace }}/wheelhouse":/wheels \
            -v "${{ github.workspace }}/requirements.txt":/requirements.txt \
            quay.io/pypa/manylinux_2_28_x86_64:latest /bin/bash -lc "\
              /opt/python/cp312-cp312/bin/pip wheel --no-deps --wheel-dir=/wheels -r /requirements.txt || true; \
              chown -R $(id -u):$(id -g) /wheels || true"

      - name: Prepare out directory
        run: |
          rm -rf out || true
          mkdir -p out/python
          mkdir -p out/lib64
          chmod -R 755 out || true

      - name: Create robust build script for container
        run: |
          cat > build_in_container.sh <<'SCRIPT'
#!/bin/bash
set -ex
set -o pipefail

WORKSPACE="/workspace"
OUT="/out"
WHEELHOUSE="${WORKSPACE}/wheelhouse"
REQ="${WORKSPACE}/requirements.txt"
LOG="${OUT}/build.log"

echo "Build script start: $(date)" | tee -a "$LOG"

# install minimal tools and libs (tolerate failures)
echo "Installing base packages..." | tee -a "$LOG"
dnf -y update || true
dnf -y install -y which findutils tar xz unzip curl fontconfig freetype freetype-devel glibc-langpack-en python3 python3-pip python3-devel || true

# try to install common runtime libs to be able to run ldd & copy .so
echo "Installing common libs that help ldd and runtime" | tee -a "$LOG"
dnf -y install -y nspr nss nss-util dbus-glib atk at-spi2-atk expat cairo libX11 libXcomposite libXcursor libXdamage libXrandr libXtst libXrender libXfixes libXext libXScrnSaver libxcb libxshmfence libxkbcommon mesa-libgbm libdrm alsa-lib gtk3 pango cups-libs || true

# ensure pip is present
python3 -m ensurepip --upgrade || true
if ! python3 -m pip --version >/dev/null 2>&1; then
  curl -sS https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py || true
  python3 /tmp/get-pip.py || true
fi
python3 -m pip install --upgrade pip setuptools wheel || true

# detect python minor version (robusto)
PYVER=$(python3 -c 'import sys; v=sys.version_info; print("%d.%d" % (v.major, v.minor))')
echo "Detected python version: $PYVER" | tee -a "$LOG"

OUT_SITE="$OUT/python/lib/python${PYVER}/site-packages"
mkdir -p "$OUT_SITE"
chmod -R a+rwX "$OUT_SITE"

# install wheels from wheelhouse (if present)
if [ -f "$REQ" ]; then
  echo "Installing requirements from wheelhouse into $OUT_SITE" | tee -a "$LOG"
  python3 -m pip install --no-index --find-links="$WHEELHOUSE" --no-deps --target="$OUT_SITE" -r "$REQ" || true
fi

# ensure playwright package is present in site-packages
echo "Installing playwright package into $OUT_SITE" | tee -a "$LOG"
python3 -m pip install --no-deps --upgrade playwright --target="$OUT_SITE" || true

# set env so python will pick up the package
export PYTHONPATH="$OUT_SITE"
export PLAYWRIGHT_BROWSERS_PATH=/tmp/ms-playwright
echo "PYTHONPATH=$PYTHONPATH" | tee -a "$LOG"
echo "PLAYWRIGHT_BROWSERS_PATH=$PLAYWRIGHT_BROWS_PATH" | tee -a "$LOG" || true

# Run playwright install to get browser binaries into /tmp
echo "Running: python3 -m playwright install --with-deps chromium" | tee -a "$LOG"
PYTHONPATH="$PYTHONPATH" PLAYWRIGHT_BROWSERS_PATH="$PLAYWRIGHT_BROWS_PATH" python3 -m playwright install --with-deps chromium 2>&1 | tee /tmp/playwright-install.log || true
cp -v /tmp/playwright-install.log "$OUT/" || true

# copy browsers into OUT
mkdir -p "$OUT/.cache/ms-playwright"
cp -a /tmp/ms-playwright/* "$OUT/.cache/ms-playwright/" 2>/dev/null || true

# locate headless binary (headless_shell preferred)
HEADLESS_BIN="$(find "$OUT" -type f -name headless_shell -print -quit || true)"
if [ -z "$HEADLESS_BIN" ]; then
  HEADLESS_BIN="$(find "$OUT" -type f \( -name chrome -o -name chromium \) -print -quit || true)"
fi
echo "HEADLESS_BIN=${HEADLESS_BIN}" | tee -a "$LOG"
echo "HEADLESS_BIN=${HEADLESS_BIN}" > "$OUT/build-info.txt"

if [ -z "$HEADLESS_BIN" ]; then
  echo "ERROR: no headless binary found. See /tmp/playwright-install.log and $OUT/build-info.txt" | tee -a "$LOG"
  ls -la "$OUT" | tee -a "$LOG"
  exit 0
fi

# run ldd on the binary and save
echo "Running ldd on $HEADLESS_BIN" | tee -a "$LOG"
ldd "$HEADLESS_BIN" > "$OUT/ldd-headless.txt" 2>&1 || true

# parse .so names referenced by ldd (extract tokens containing .so)
LIBS=$(awk '{for(i=1;i<=NF;i++) if($i ~ /\.so/) print $i}' "$OUT/ldd-headless.txt" | sed 's/,//g' | sed 's/.*\///' | sort -u)
echo "Referenced libs:" | tee -a "$LOG"
echo "$LIBS" | tee -a "$LOG"

# function to copy a lib by name (try several common paths and glob for versions)
copy_lib() {
  local name="$1"
  for p in /usr/lib64 /usr/lib /lib64 /lib /opt/lib64 /usr/lib/x86_64-linux-gnu; do
    if [ -f "$p/$name" ]; then
      cp -v "$p/$name" "$OUT/lib64/" && return 0
    fi
    # try globbed versioned files
    for f in "$p/$name"*; do
      [ -e "$f" ] || continue
      cp -v "$f" "$OUT/lib64/" && return 0
    done
  done
  echo "WARN: not found lib $name" >> "$OUT/ldd-missing.txt"
  return 1
}

mkdir -p "$OUT/lib64"

# copy each lib referenced by ldd
for lib in $LIBS; do
  case "$lib" in
    linux-vdso*|ld-linux*|ld64.so*) continue ;;
  esac
  copy_lib "$lib" || true
done

# also copy "not found" tokens explicitly listed in ldd output
grep "not found" "$OUT/ldd-headless.txt" > "$OUT/ldd-missing.txt" || true

# copy symlink targets for completeness
for f in "$OUT/lib64"/*; do
  if [ -L "$f" ]; then
    real=$(readlink -f "$f" || true)
    if [ -f "$real" ]; then
      cp -v "$real" "$OUT/lib64/" || true
    fi
  fi
done

# Save build log
echo "Build finished at $(date)" | tee -a "$LOG"
cp -v "$LOG" "$OUT/" || true

# ensure permissions
chmod -R a+rwX "$OUT" || true

echo "Container script done" | tee -a "$LOG"
SCRIPT
          chmod +x build_in_container.sh

      - name: Run build script inside amazonlinux container
        run: |
          # mount whole workspace to /workspace so the script can access wheelhouse, requirements.txt and out
          docker run --rm -v "${{ github.workspace }}":/workspace -w /workspace public.ecr.aws/amazonlinux/amazonlinux:2023 /bin/bash -c "/workspace/build_in_container.sh"

      - name: Show out contents (debug)
        run: |
          echo "=== /out tree ==="
          find out -maxdepth 4 -ls || true
          echo "=== build-info.txt ==="
          [ -f out/build-info.txt ] && sed -n '1,200p' out/build-info.txt || echo "no build-info"
          echo "=== ldd-headless.txt (tail) ==="
          [ -f out/ldd-headless.txt ] && tail -n 200 out/ldd-headless.txt || echo "no ldd output"
          echo "=== ldd-missing.txt ==="
          [ -f out/ldd-missing.txt ] && cat out/ldd-missing.txt || echo "no missing libs file"
          echo "=== playwright-install.log (tail) ==="
          [ -f out/playwright-install.log ] && tail -n 200 out/playwright-install.log || echo "no playwright-install.log"

      - name: Abort early if out is empty
        run: |
          if [ -z "$(find out -mindepth 1 -print -quit)" ]; then
            echo "ERROR: out/ seems empty after build. Show /workspace for debugging:" >&2
            ls -la || true
            echo "Content of workspace (top):" >&2
            find . -maxdepth 2 -ls || true
            exit 1
          fi

      - name: Fix permissions
        run: |
          echo "Fixing permissions"
          find out -type d -exec chmod 755 {} \; || true
          find out -type f -exec chmod 644 {} \; || true
          find out -name "headless_shell" -o -name "chrome" -exec chmod 755 {} \; || true
          find out/lib64 -name "*.so*" -exec chmod 755 {} \; 2>/dev/null || true

      - name: Show final structure
        run: |
          echo "=== Final size ==="
          du -sh out || true
          echo "=== Chromium binaries (ls) ==="
          find out -type f \( -name "headless_shell" -o -name "chrome" -o -name "chromium" \) -print -exec ls -la {} \; || true
          echo "=== Playwright (site-packages) ==="
          find out/python -maxdepth 4 -type d -name "playwright" -print -exec ls -la {} \; 2>/dev/null || true
          echo "=== lib64 sample ==="
          ls -la out/lib64 | head -n 200 || true

      - name: Zip layer
        run: |
          cd out
          zip -9 -r ../playwright_layer_py312.zip .
          cd ..
          ls -lh playwright_layer_py312.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: playwright-layer-py312
          path: playwright_layer_py312.zip